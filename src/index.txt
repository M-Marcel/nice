import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import { useAppDispatch, useAppSelector } from "../hooks";
import { getProfile, updateProfile } from "../slices/auth/authSlice";
import Button from "../components/Button";
import LeftSidebar from "../components/LeftSidebar";
import ProfileFrame from "../assets/dbFrame.png";
import { useNavigate } from "react-router-dom";

const Profile = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate()
  const { isFetchProfileSuccess, user, isUpdateProfileSuccess, isLoading, message } = useAppSelector((state) => state.auth);

  const [formData, setFormData] = useState({
    fullName: `${user?.firstName || ""} ${user?.lastName || ""}`,
    workRole: user?.userWorkRole || "",
    experienceLevel: user?.userTechnicalExperience || "",
    email: user?.email || "",
    createdAt: user?.createdAt ? new Date(user.createdAt).toLocaleString() : "",
  });

  const [isEditable, setIsEditable] = useState(false);

  // Fetch user profile
  useEffect(() => {
    if (!user) dispatch(getProfile());    
    
    if (isFetchProfileSuccess) toast.success("Profile loaded successfully");

    return () => {
     
    };
  }, [dispatch, isFetchProfileSuccess, user]);

  useEffect(() => {
    
    if (isUpdateProfileSuccess) {
      toast.success("Profile updated successfully!");
      setIsEditable(false); 
      navigate("/dashboard")
     
    }
  }, [isUpdateProfileSuccess, navigate]);

  const handleEditToggle = () => {
    setIsEditable(true); // Enable editing when Edit button is clicked
  };

  const handleSave = (e: React.FormEvent) => {
    e.preventDefault();
    const [firstName, lastName] = formData.fullName.split(" ");
    const updatedData = {
      firstName: firstName || "",
      lastName: lastName || "",
      userTechnicalExperience: formData.experienceLevel,
      userWorkRole: formData.workRole,
    };
    dispatch(updateProfile(updatedData));
    if (isUpdateProfileSuccess) {
      toast.success("Profile updated successfully!");
      setIsEditable(false); 
      navigate("/dashboard")
  
    }
   
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  return (
    <div className="flex flex-col lg:flex-row px-2">
      <LeftSidebar />
      <div className="px-4 w-full lg:w-4/5 lg:relative left-[18%]">
        <div className="flex flex-col lg:flex-row gap-8 mt-8">
          <div className="w-full lg:w-1/5 px-4 py-4">
            <div className="relative flex flex-col gap-3 top-[50px]">
              <a href="/" className="text-xs">Profile</a>
              <a href="/" className="text-xs text-gray-500">Password</a>
              <a href="/" className="text-xs text-gray-500">Notifications</a>
              <a href="/" className="text-xs text-gray-500">Early actions</a>
            </div>
          </div>

          <div className="w-full lg:w-4/5 px-2 py-4">
            <div>
              <img src={ProfileFrame} alt="profile-frame" className="rounded-3xl mb-6" />

              <div className="bg-white py-3 px-3">
                <div className="flex justify-between items-center">
                  <div>
                    <h2 className="text-sm">{formData.fullName}</h2>
                    <p className="text-xs text-gray-500">{formData.email}</p>
                  </div>
                  <Button className="bg-white text-sm border border-gray-600 py-2 px-2 rounded-lg">
                    Change image
                  </Button>
                </div>

                <form onSubmit={handleSave} className="mt-6">
                  <div className="flex flex-col gap-4">
                    {/* Full Name */}
                    <div className="flex flex-col">
                      <label className="text-sm text-gray-500">Full Name</label>
                      <input
                        type="text"
                        name="fullName"
                        value={formData.fullName}
                        onChange={handleInputChange}
                        disabled={!isEditable}
                        className="border border-gray-600 py-2 px-2 rounded-lg"
                      />
                    </div>

                    {/* Work Role */}
                    <div className="flex flex-col">
                      <label className="text-sm text-gray-500">Role</label>
                      <input
                        type="text"
                        name="workRole"
                        value={formData.workRole}
                        onChange={handleInputChange}
                        disabled={!isEditable}
                        className="border border-gray-600 py-2 px-2 rounded-lg"
                      />
                    </div>

                    {/* Experience Level */}
                    <div className="flex flex-col">
                      <label className="text-sm text-gray-500">Experience Level</label>
                      <input
                        type="text"
                        name="experienceLevel"
                        value={formData.experienceLevel}
                        onChange={handleInputChange}
                        disabled={!isEditable}
                        className="border border-gray-600 py-2 px-2 rounded-lg"
                      />
                    </div>
                  </div>

                  {/* Buttons */}
                  <div className="flex justify-end mt-4">
                    {/* Separate Edit Button */}
                    {!isEditable && (
                      <Button className="mr-4" type="button" onClick={handleEditToggle}>
                        Edit
                      </Button>
                    )}

                    {/* Separate Save Button */}
                    {isEditable && (
                      <Button className="mr-4" type="submit" disabled={isLoading}>
                        {isLoading ? "Saving..." : "Save"}
                      </Button>
                    )}
                  </div>
                </form>

                {message && <p className="text-red-500 text-sm mt-2">{message}</p>}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Profile;
