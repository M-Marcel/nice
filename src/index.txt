import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import { useAppDispatch, useAppSelector } from "../hooks";
import { getProfile, updateProfile } from "../slices/auth/authSlice";
import Button from "../components/Button";
import LeftSidebar from "../components/LeftSidebar";
import ProfileFrame from "../assets/dbFrame.png";
import Elipse from '../assets/Ellipse2.png'
import Pencil from '../assets/pencil.png'
import Dashboardicon from '../assets/dashboard.png'
import { useNavigate } from "react-router-dom";

const Profile = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate()
  const { isFetchProfileSuccess, user, isUpdateProfileSuccess, isLoading, message } = useAppSelector((state) => state.auth);

  const [formData, setFormData] = useState({
    fullName: `${user?.firstName || ""} ${user?.lastName || ""}`,
    workRole: user?.userWorkRole || "",
    experienceLevel: user?.userTechnicalExperience || "",
    email: user?.email || "",
    createdAt: user?.createdAt ? new Date(user.createdAt).toLocaleString() : "",
  });

  const [isEditable, setIsEditable] = useState(false);

  // Fetch user profile
  useEffect(() => {
    if (!user) dispatch(getProfile());

    if (isFetchProfileSuccess) toast.success("Profile loaded successfully");

    return () => {

    };
  }, [dispatch, isFetchProfileSuccess, user]);

  useEffect(() => {

    if (isUpdateProfileSuccess) {
      toast.success("Profile updated successfully!");
      setIsEditable(false);
      navigate("/dashboard")

    }
  }, [isUpdateProfileSuccess, navigate]);

  const handleEditToggle = () => {
    setIsEditable(true); // Enable editing when Edit button is clicked
  };

  const handleSave = (e: React.FormEvent) => {
    e.preventDefault();
    const [firstName, lastName] = formData.fullName.split(" ");
    const updatedData = {
      firstName: firstName || "",
      lastName: lastName || "",
      userTechnicalExperience: formData.experienceLevel,
      userWorkRole: formData.workRole,
    };
    dispatch(updateProfile(updatedData));
    if (isUpdateProfileSuccess) {
      toast.success("Profile updated successfully!");
      setIsEditable(false);
      navigate("/dashboard")

    }

  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  return (
    <div className="flex flex-col lg:flex-row px-2">
      <LeftSidebar />
      <div className="px-4 w-full lg:w-4/5 lg:relative left-[18%]">
        <div className="flex flex-col lg:flex-row gap-8 mt-8">
          <div className="w-full lg:w-1/5 px-4 py-4">
            <div className="relative flex flex-col gap-3 top-[50px]">
              <a href="/" className="text-xs">Profile</a>
              <a href="/" className="text-xs text-gray-500">Password</a>
              <a href="/" className="text-xs text-gray-500">Notifications</a>
              <a href="/" className="text-xs text-gray-500">Early actions</a>
            </div>
          </div>

          <div className="w-full lg:w-4/5 px-2 py-4">
            <div>
              <img src={ProfileFrame} alt="profile-frame" className="rounded-3xl mb-6" />

              <div className="bg-white py-3 px-3">
                <div className="mb-4 lg:absolute top-[30%]">
                  <img
                    src={Elipse}
                    alt="Profile"
                    width={65}
                    height={65}
                    className="rounded-full"
                  />
                </div>
                <div className="flex justify-between items-center">
                  <div>
                    <h2 className="text-sm">{formData.fullName}</h2>
                    <p className="text-xs text-gray-500">{formData.email}</p>
                  </div>
                  <Button className="bg-white text-sm border border-gray-600 py-2 px-2 rounded-lg">
                    Change image
                  </Button>
                </div>
                <div className="flex flex-col lg:flex-row gap-4 justify-between">
                  <form className="w-[100%] lg:w-[50%]" onSubmit={handleSave}>
                    {message && <p className="text-red-500 text-sm mt-2">{message}</p>}
                    <div className="flex flex-col lg:flex-row justify-between items-center">
                      <div className="flex w-[100%] lg:w-[70%] flex-col mb-3">
                        <label className="mb-1 text-sm text-gray-500">Full name</label>
                        <input
                          type="text"
                          name="fullName"
                          value={formData.fullName}
                          onChange={handleInputChange}
                          disabled={!isEditable}
                          className="border py-2 px-2 w-[100%] border-gray-600 outline-0 rounded-lg"
                        />
                      </div>
                      <div className="w-[100%] lg:w-[25%] flex gap-6 items-center mt-4">
                        {!isEditable && (
                          <Button
                            onClick={handleEditToggle}
                            type="button"
                            className="bg-white mt-3 gap-2 flex flex-row items-center border-none px-2 py-2"
                          >
                            <img src={Pencil} alt="pencil" width={20} height={20} />
                            <span className="text-gray-500 text-sm">Edit</span>
                          </Button>
                        )}
                        {isEditable && (
                          <Button className="custom-bg px-4 py-2 rounded-lg text-white text-sm" type="submit" disabled={isLoading}>
                            {isLoading ? "Saving..." : "Save"}
                          </Button>
                        )}


                      </div>
                    </div>
                    <div className="flex items-center gap-2 mb-3">
                      <div className="flex w-[90%] flex-col mb-3">
                        <label className="mb-1 text-sm text-gray-500">Role</label>
                        <input
                          type="text"
                          name="workRole"
                          value={formData.workRole}
                          onChange={handleInputChange}
                          disabled={!isEditable}
                          className="border px-2 py-2 w-[100%] border-gray-600 outline-0 rounded-lg"
                        />
                      </div>

                    </div>
                    <div className="flex items-center gap-2 mb-3">
                      <div className="flex w-[90%] flex-col mb-3">
                        <label className="mb-1 text-sm text-gray-500">Experience level</label>
                        <input
                          type="text"
                          name="experienceLevel"
                          value={formData.experienceLevel}
                          onChange={handleInputChange}
                          disabled={!isEditable}
                          className="px-2 border py-2 w-[100%] border-gray-600 outline-0 rounded-lg"

                        />
                      </div>
                    </div>
                  </form>
                  <div className="w-[100%] lg:w-[35%]">
                    <div className="mb-3 px-3 mt-4 border border-gray-600 py-4 rounded-lg">
                      <div className="mb-3">
                        <img src={Dashboardicon} alt="dashboardIcon" className="mb-2" width={20} height={20} />
                        <p className="text-gray-500 text-sm">Account created</p>
                      </div>
                      <p className="text-sm">{formData?.createdAt}</p>
                    </div>
                    <div className="mb-3 px-3 mt-4 border border-gray-600 py-4 rounded-lg">
                      <div className="mb-3">
                        <img src={Dashboardicon} alt="dashboardIcon" className="mb-2" width={20} height={20} />
                        <p className="text-gray-500 text-sm">Account created</p>
                      </div>
                      <p className="text-sm">{formData?.createdAt}</p>
                    </div>
                    <div className="mb-3 px-3 mt-4 border border-gray-600 py-4 rounded-lg">
                      <div className="mb-3">
                        <Button className="bg-black-500 text-xs text-white px-2 py-2 rounded-full">14 Invites</Button>
                      </div>
                      <p className="text-sm">www.lanepact.com/john</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Profile;




   <a key={item.id} href={item.url} className="text-gray-500 hover:text-black-500 hover:bg-gray-910 
                    px-2 py-3">
                            <div className="flex gap-2 items-center">
                                <img src={item.image} alt="dashboard" width={18} height={18} />
                                <p className="text-sm">{item.title}</p>
                            </div>
                        </a>






import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
    CompleteSignUpFormData,
    ForgotFormData,
    LoginFormData,
    ResetPasswordFormData,
    SignUpFormData,
    UpdateProfileFormData,
    User,
    ValidateFormData,
} from "../../dataTypes";
import authService from "../../helpers/authService";
import { toast } from "react-toastify";
import { jwtDecode } from "jwt-decode";

type InitialState = {
    user: User | null;
    isError: boolean;
    token: string | null;
    isSuccess: boolean;
    isCompleteSignUpSuccess: boolean;
    isForgotPasswordSuccess: boolean;
    isLoginSuccess: boolean;
    isValidationSuccess: boolean;
    isFetchProfileSuccess: boolean
    isResetPasswordSuccess: boolean;
    isUpdateProfileSuccess: boolean;
    isLoading: boolean;
    message: string;
};

const storedRegisterUser = localStorage.getItem("user");
const user = storedRegisterUser ? JSON.parse(storedRegisterUser) : null;
const storedToken = localStorage.getItem("token");

const initialState: InitialState = {
    user: user || null,
    token: storedToken,
    isError: false,
    isSuccess: false,
    isCompleteSignUpSuccess: false,
    isForgotPasswordSuccess: false,
    isLoginSuccess: false,
    isValidationSuccess: false,
    isResetPasswordSuccess: false,
    isFetchProfileSuccess: false,
    isUpdateProfileSuccess: false,
    isLoading: false,
    message: "",
};

// Decode token function
const decodeToken = (token: string): User | null => {
    try {
        const decoded: any = jwtDecode(token); // Decode JWT
        return {
            _id: decoded.sub,
            email: decoded.email,
            createdAt: decoded.createdAt,
            gender: decoded.gender,
            firstName: decoded.firstName,
            freemium: decoded.freemium,
            lastName: decoded.lastName,
            premium: decoded.premium,
            role: decoded.role,
            otp: decoded.otp,
            otpExpiry: decoded.otpExpiry,
            userUseForZroleak: decoded.userUseForZroleak,
            freemiumExpiresAt: decoded.freemiumExpiresAt,
            userCompanySize: decoded.userCompanySize,
            userTechnicalExperience: decoded.userTechnicalExperience,
            userWorkRole: decoded.userWorkRole,
            emailConfirmToken: decoded.emailConfirmToken,
            emailConfirmTokenExpiry: decoded.emailConfirmTokenExpiry,
            emailConfirmed: decoded.emailConfirmed
        };
    } catch (error) {
        console.error("Invalid token", error);
        return null;
    }
};

// Updated thunk return types based on actual API responses
export const register = createAsyncThunk<
    { user: User; message: string },
    SignUpFormData,
    { rejectValue: string }
>("auth/register", async (userData, thunkApi) => {
    try {
        const response = await authService.register(userData);
        return response;
    } catch (error: any) {
        const message =
            error.response?.data?.message || error.message || "Registration failed";
        return thunkApi.rejectWithValue(message);
    }
});

export const verifyEmail = createAsyncThunk<
    { message: string, email: string, provider: string },
    string,
    { rejectValue: string }
>("auth/verifyEmail", async (token, thunkApi) => {
    try {
        const response = await authService.verifyEmail(token);
        return response;
    } catch (error: any) {
        const errorMessage =
            error.response?.data?.message || "Verification failed. Please try again.";
        return thunkApi.rejectWithValue(errorMessage);
    }
});

export const verifyUser = createAsyncThunk<
    { token: string; message: string },
    string,
    { rejectValue: string }
>("auth/verifyUser", async (token, thunkApi) => {
    try {
        const response = await authService.verifyUser(token); // Assume token is returned
        localStorage.setItem("token", response.token);
        return response;
    } catch (error: any) {
        const errorMessage =
            error.response?.data?.message || "Verification failed. Please try again.";
        return thunkApi.rejectWithValue(errorMessage);
    }
});

export const login = createAsyncThunk<
    { user: User; token: string; message: string },
    LoginFormData,
    { rejectValue: string }
>("auth/login", async (userData, thunkApi) => {
    try {
        const response = await authService.login(userData);
        return response;
    } catch (error: any) {
        const message =
            error.response?.data?.message || error.message || "Login failed";
        return thunkApi.rejectWithValue(message);
    }
});

export const forgotPassword = createAsyncThunk<
    { message: string },
    ForgotFormData,
    { rejectValue: string }
>("auth/forgot-password", async (userData, thunkApi) => {
    try {
        const response = await authService.forgotPassword(userData);
        return response;
    } catch (error: any) {
        const message =
            error.response?.data?.message || error.message || "Failed to send reset email";
        return thunkApi.rejectWithValue(message);
    }
});

export const validateOtp = createAsyncThunk<
    { user: User; message: string },
    ValidateFormData,
    { rejectValue: string }
>("auth/validate-otp", async (userData, thunkApi) => {
    try {
        const response = await authService.validateOtp(userData);
        return response;
    } catch (error: any) {
        const message =
            error.response?.data?.message || error.message || "OTP validation failed";
        return thunkApi.rejectWithValue(message);
    }
});

export const resetPassword = createAsyncThunk<
    { message: string },
    ResetPasswordFormData,
    { rejectValue: string }
>("auth/reset-password", async (userData, thunkApi) => {
    try {
        const response = await authService.resetPassword(userData);
        return response;
    } catch (error: any) {
        const message =
            error.response?.data?.message || error.message || "Password reset failed";
        return thunkApi.rejectWithValue(message);
    }
});

export const completeSignUp = createAsyncThunk<
    { user: User; message: string },
    CompleteSignUpFormData,
    { rejectValue: string }
>("auth/complete-signup", async (userData, thunkApi) => {
    try {
        const response = await authService.completeSignUp(userData);
        return response;
    } catch (error: any) {
        const message =
            error.response?.data?.message || error.message || "Signup completion failed";
        return thunkApi.rejectWithValue(message);
    }
});

export const getProfile = createAsyncThunk<
    { user: User; message: string },
    void,
    { rejectValue: string }
>("auth/getProfile", async (_, thunkApi) => {
    try {
        const response = await authService.getProfile();
        return response;
    } catch (error: any) {
        const message =
            error.response?.data?.message || error.message || "Failed to fetch profile";
        return thunkApi.rejectWithValue(message);
    }
});

export const updateProfile = createAsyncThunk<
    { user: User | null; message: string },
    UpdateProfileFormData,
    { rejectValue: string }
>("auth/updateProfile", async (userData, thunkApi) => {
    try {
        const response = await authService.updateProfile(userData);
        return response;
    } catch (error: any) {
        const message =
            error.response?.data?.message || error.message || "Profile update failed";
        return thunkApi.rejectWithValue(message);
    }
});

// Logout thunk doesn't return anything
export const logout = createAsyncThunk("auth/logout", async () => {
    await authService.logout();
});

const authSlice = createSlice({
    name: "auth",
    initialState,
    reducers: {
        setToken: (state, action) => {
            state.token = action.payload;
        },
        logout: (state) => {
            state.user = null;
            state.token = null;
            localStorage.removeItem("user");
            localStorage.removeItem("token");
        },
        reset: (state) => {
            state.isLoading = false
            state.isSuccess = false
            state.isCompleteSignUpSuccess = false
            state.isForgotPasswordSuccess = false
            state.isLoginSuccess = false
            state.isFetchProfileSuccess = false
            state.isUpdateProfileSuccess = false
            state.isError = false
            state.message = ''
        },
        userRestored: (state, action) => {
            state.user = action.payload;
        },
    },
    extraReducers: (builder) => {
        builder
            // Register Reducers
            .addCase(register.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(register.fulfilled, (state, action) => {
                state.isLoading = false;
                state.isSuccess = true;
                state.user = action.payload.user;
                state.message = action.payload.message;
            })
            .addCase(register.rejected, (state, action) => {
                state.isLoading = false;
                state.isError = true;
                state.message = action.payload as string;
                toast.error(action.payload)
            })
            // Verify Email reducers
            .addCase(verifyEmail.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(verifyEmail.fulfilled, (state, action) => {
                state.isLoading = false;
                state.isSuccess = true;
                state.message = action.payload.message;
            })
            .addCase(verifyEmail.rejected, (state, action) => {
                state.isLoading = false;
                state.isError = true;
                state.message = action.payload as string;
            })
            .addCase(verifyUser.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(verifyUser.fulfilled, (state, action) => {
                state.isLoading = false;
                state.isSuccess = true;
                const { token } = action.payload;

                // Decode the token to get user details
                const decodedUser = decodeToken(token);
                  console.log("decodedUser", decodedUser)
                if (decodedUser) {
                    state.user = decodedUser;
                    state.token = token;
                    localStorage.setItem("user", JSON.stringify(decodedUser)); // Save user to localStorage
                } else {
                    state.user = null;
                    state.token = null;
                }
                state.message = action.payload.message;
            })
            .addCase(verifyUser.rejected, (state, action) => {
                state.isLoading = false;
                state.isError = true;
                state.user = null;
                state.message = action.payload as string;
            })

            // Login reducers
            .addCase(login.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(login.fulfilled, (state, action) => {
                state.isLoading = false;
                state.isLoginSuccess = true;
                state.user = action.payload.user;
                state.token = action.payload.token;
                state.message = action.payload.message;
                toast.success('log in successful');

            })
            .addCase(login.rejected, (state, action) => {
                state.isLoading = false;
                state.isError = true;
                state.message = action.payload as string;
                state.user = null;
                toast.error(action.payload);
            })

            // Forgot Password reducers
            .addCase(forgotPassword.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(forgotPassword.fulfilled, (state, action) => {
                state.isLoading = false;
                state.isForgotPasswordSuccess = true;
                state.message = action.payload.message;
                toast.success('an OTP has been sent to your mail');
            })
            .addCase(forgotPassword.rejected, (state, action) => {
                state.isLoading = false;
                state.isError = true;
                state.message = action.payload as string;
                toast.error(action.payload);
            })

            // Validate OTP reducers
            .addCase(validateOtp.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(validateOtp.fulfilled, (state, action) => {
                state.isLoading = false;
                state.isValidationSuccess = true;
                state.user = action.payload.user
                state.message = action.payload.message;
                toast.success("Validation successful");
            })
            .addCase(validateOtp.rejected, (state, action) => {
                state.isLoading = false;
                state.isError = true;
                state.user = null
                state.message = action.payload as string;
                toast.error(action.payload)
            })

            // Reset Password reducers
            .addCase(resetPassword.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(resetPassword.fulfilled, (state, action) => {
                state.isLoading = false;
                state.isResetPasswordSuccess = true;
                state.message = action.payload.message;
                toast.success("Password reset successful");
            })
            .addCase(resetPassword.rejected, (state, action) => {
                state.isLoading = false;
                state.isError = true;
                state.message = action.payload as string;
                toast.error(action.payload);
            })

            // Complete Signup reducers
            .addCase(completeSignUp.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(completeSignUp.fulfilled, (state, action) => {
                state.isLoading = false;
                state.isCompleteSignUpSuccess = true;
                state.user = action.payload.user;
                state.message = action.payload.message;
            })
            .addCase(completeSignUp.rejected, (state, action) => {
                state.isLoading = false;
                state.isError = true;
                state.message = action.payload as string;
                toast.error(action.payload);
            })

            // Get Profile reducers
            .addCase(getProfile.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(getProfile.fulfilled, (state, action) => {
                state.isLoading = false;
                state.isFetchProfileSuccess = true;
                state.user = action.payload.user;

                state.message = action.payload.message;
            })
            .addCase(getProfile.rejected, (state, action) => {
                state.isLoading = false;
                state.isError = true;
                state.user = null;
                state.message = action.payload as string;
                toast.error(action.payload);
            })

            // Update Profile reducers
            .addCase(updateProfile.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(updateProfile.fulfilled, (state, action) => {
                state.isLoading = false;
                state.isUpdateProfileSuccess = true;
                state.user = action.payload.user;
                state.message = action.payload.message;
            })
            .addCase(updateProfile.rejected, (state, action) => {
                state.isLoading = false;
                state.isError = true;
                state.message = action.payload as string;
                toast.error(action.payload as string);
            })

            // Logout reducers
            .addCase(logout.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(logout.fulfilled, (state) => {
                state.isLoading = false;
                state.user = null;
                state.token = null;
                state.isLoginSuccess = false;
                state.isError = false;
                state.message = '';
                localStorage.removeItem("user");
                localStorage.removeItem("token");
            });
    },
});

export const { reset, setToken, userRestored } = authSlice.actions;
export default authSlice.reducer;




import React, { useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { getProfile, verifyEmail } from '../../slices/auth/authSlice';
import { toast } from 'react-toastify';
import { useAppDispatch } from '../../hooks';

const VerifyEmail = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const { search } = useLocation();

  useEffect(() => {
    const token = new URLSearchParams(search).get('token');

    if (!token) {
      toast.error('No token provided. Please check your verification link.');
      return;
    }

    const handleEmailVerification = async () => {
      try {
        const response = await dispatch(verifyEmail(token)).unwrap();

        console.log('Verification response:', response);

        if (response?.email) {
          localStorage.setItem('userEmail', response.email);
          if (response.provider === 'Google') {
            toast.success('Email verified successfully! Redirecting to your dashboard...');
            const profile = await dispatch(getProfile()).unwrap();
            if (profile) {
              navigate('/dashboard');
            }
            localStorage.getItem('userEmail')
            return;

          }
        }

        toast.success('Email verified successfully!');
        navigate('/let-us-know-you', { state: { provider: response?.provider } });

      } catch (error: any) {
        console.error('Verification failed:', error);
        toast.error(error.message || 'Verification failed. Please try again.');
      }
    };

    handleEmailVerification();
  }, [search, dispatch, navigate]);

  return (
    <div className="flex justify-center items-center h-screen bg-gray-100">
      <div className="p-8 bg-white rounded-lg shadow-lg max-w-md w-full">
        <h2 className="text-xl font-semibold text-gray-700 mb-4">
          Verifying your email...
        </h2>
        <p className="text-sm text-gray-500">
          Please wait while we verify your email address...
        </p>
      </div>
    </div>
  );
};

export default VerifyEmail;



import { useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { toast } from "react-toastify";
import { useAppDispatch } from "../../hooks";
import { verifyUser } from "../../slices/auth/authSlice";

const VerifyUser = () => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const { search } = useLocation();

  useEffect(() => {
    const verifyUserProfile = async () => {
      const token = new URLSearchParams(search).get("token");
      console.log("Token:", token);
      if (!token) {
        toast.error("No token provided. Please try signing in again.");
        navigate("/");
        return;
      }

      try {
        // Dispatch verifyUser and get the profile
        const profile = await dispatch(verifyUser(token)).unwrap();
        console.log("User profile:", profile);

        // Store token in localStorage only if verification is successful
        localStorage.setItem("token", token);

        // Navigate to dashboard after successful verification
        toast.success("Welcome back!");
        navigate("/dashboard");
      } catch (error) {
        console.error("Error verifying user:", error);
        toast.error("Verification failed. Please try again.");
        navigate("/");
      }
    };

    verifyUserProfile();
  }, [navigate, search, dispatch]);

  return (
    <div className="flex items-center justify-center h-screen">
      <p>Verifying user... Please wait.</p>
    </div>
  );
};

export default VerifyUser;



http://localhost:3000/verify-user?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InJveWFsbWludGFAZ21haWwuY29tIiwic3ViIjoiNjdiZGZkZTg5ZTUwNjM4MDVlMDdmZDExIiwicm9sZSI6InVzZXIiLCJzdXNwZW5kZWQiOmZhbHNlLCJpYXQiOjE3NDA1MDczMjMsImV4cCI6MTc0MTExMjEyM30.O8whcaVqvOEgfWIU2KZ-dqdEEUCvTy-AJTf4qH16wlc




SKILLS SECTION

import { useState, useEffect } from "react";
import { Portfolio } from "../dataTypes";
import Button from "./Button";
import { toast } from "react-toastify";

type SkillsProps = {
    portfolioData: Portfolio;
    updatePortfolioData: (updatedData: Partial<Portfolio>) => void;
};

const Skills = ({ portfolioData, updatePortfolioData }: SkillsProps) => {
    const [skillInput, setSkillInput] = useState(""); // Temporary input for adding a new skill
    const [skills, setSkills] = useState<string[]>([]); // Local state for skills

    // Initialize skills from portfolioData
    useEffect(() => {
        if (portfolioData?.sections?.length > 0) {
            const skillsSection = portfolioData.sections.find((section) => section.type === "Skills");
            if (skillsSection) {
                setSkills(skillsSection.customContent?.skills || []);
            }
        }
    }, [portfolioData]);

    // Handle adding a new skill
    const handleAddSkill = () => {
        if (skillInput.trim() && !skills.includes(skillInput.trim())) {
            setSkills((prevSkills) => [...prevSkills, skillInput.trim()]);
            setSkillInput(""); // Clear the input field
        }
    };

    // Handle removing a skill
    const handleRemoveSkill = (skill: string) => {
        setSkills((prevSkills) => prevSkills.filter((s) => s !== skill));
    };

    // Handle saving changes
    const handleSave = () => {
        // Find the Skills section from the portfolioData
        const skillsSection = portfolioData.sections.find(
            (section) => section.type === "Skills"
        );

        if (!skillsSection) {
            console.error("Skills section not found in portfolioData.");
            return;
        }

        // Ensure the _id is included in the updated section
        const updatedSkillsSection = {
            ...skillsSection,
            customContent: {
                ...skillsSection.customContent,
                skills: skills, // Update the skills array
            },
        };

        // Update the portfolioData while preserving other sections
        updatePortfolioData({
            sections: portfolioData.sections.map((section) =>
                section.type === "Skills" ? updatedSkillsSection : section
            ),
        });
        toast.success('changes saved')
    };

    return (
        <div className="pt-4 pb-4 relative z-10">
            <div className="grid grid-cols-3 items-start w-[95%] -ml-[20px] mt-5">
                {/* Display existing skills */}
                {skills.map((skill, index) => (
                    <div key={index} className="flex gap-1 flex-col items-center mt-10">
                        <span className="border border-gray-600 flex items-center px-4 rounded-xl">
                            {/* Skill icon placeholder */}
                            <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12.5 0C5.59644 0 0 5.59644 0 12.5C0 19.4036 5.59644 25 12.5 25C19.4036 25 25 19.4036 25 12.5C25 5.59644 19.4036 0 12.5 0Z" fill="#4CAF50" />
                            </svg>
                        </span>
                        <span className="text-xs">{skill}</span>
                        <button
                            type="button"
                            onClick={() => handleRemoveSkill(skill)}
                            className="text-xs text-red-500"
                        >
                            Remove
                        </button>
                    </div>
                ))}
            </div>

            {/* Add new skill input */}
            <div className="mt-10 ">
                <div className="flex gap-2">
                    <input
                        type="text"
                        value={skillInput}
                        onChange={(e) => setSkillInput(e.target.value)}
                        className="border w-[50%] border-gray-900 rounded-lg outline-0 py-1 px-1"
                        placeholder="Add a skill"
                    />
                    <Button
                        type="button"
                        onClick={handleAddSkill}
                        className="px-2 py-2 lg:px-4 lg:py-1 bg-blue-500 text-xs lg:text-sm text-white rounded-lg"
                    >
                        Add
                    </Button>
                </div>
            </div>

            {/* Save Changes Button */}
            <div className="mt-6">
                <Button onClick={handleSave} className="lg:flex text-xs lg:text-sm items-center gap-2 custom-bg shadow-lg text-white px-2 py-2 lg:px-6 lg:py-3 rounded-xl">
                    Save Changes
                </Button>
            </div>
        </div>
    );
};

export default Skills;

 <div className="mt-6">
                <Button
                    onClick={handleSave}
                    className="lg:flex text-xs lg:text-sm items-center gap-2 custom-bg shadow-lg text-white px-2 py-2 lg:px-6 lg:py-3 rounded-xl"
                >
                    Save Changes
                </Button>
            </div>




            SKILLS2

            import { useState, useEffect } from "react";
import { Category, Portfolio, Skill } from "../dataTypes";
import Button from "./Button";
import { toast } from "react-toastify";
import { useAppDispatch, useAppSelector } from "../hooks";
import { getAllSkills, getAllCategories } from "../slices/portfolio/portfolioSlice";

type SkillsProps = {
    portfolioData: Portfolio;
    updatePortfolioData: (updatedData: Partial<Portfolio>) => void;
};

const Skills = ({ portfolioData, updatePortfolioData }: SkillsProps) => {
    const [skillInput, setSkillInput] = useState("");
    const [skills, setSkills] = useState<string[]>([]);
    const [showSkillSelector, setShowSkillSelector] = useState(false);
    const [selectedCategory, setSelectedCategory] = useState("");
    const [searchTerm, setSearchTerm] = useState("");
    const dispatch = useAppDispatch();

    const {
        allSkills,
        categories,
        isLoading: skillsLoading
    } = useAppSelector((state) => state.portfolio);

    // Debug logs
    useEffect(() => {
        console.log("Skills component mounted with:", {
            allSkills,
            categories,
            skillsLoading,
            skills
        });
    }, [allSkills, categories, skillsLoading, skills]);

    // Initialize skills from portfolioData
    useEffect(() => {
        if (portfolioData?.sections?.length > 0) {
            const skillsSection = portfolioData.sections.find(
                (section) => section.type === "Skills"
            );
            if (skillsSection) {
                setSkills(skillsSection.customContent?.skills || []);
            }
        }
    }, [portfolioData]);

    // Fetch all skills and categories
    useEffect(() => {
        dispatch(getAllSkills({ page: 1, limit: 100 }));
        dispatch(getAllCategories());
    }, [dispatch]);

    // Filter skills safely with improved type checking
    const filteredSkills = (allSkills || []).filter((skill: Skill) => {
        if (!skill || !skill.name) return false;

        const matchesCategory = !selectedCategory ||
            (skill.category && 
             skill.category.name.toLowerCase() === selectedCategory.toLowerCase());
        
        const matchesSearch = searchTerm === "" || 
            skill.name.toLowerCase().includes(searchTerm.toLowerCase());
        
        return matchesCategory && matchesSearch;
    });

    const handleAddSkill = () => {
        if (skillInput.trim() && !skills.includes(skillInput.trim())) {
            setSkills((prevSkills) => [...prevSkills, skillInput.trim()]);
            setSkillInput("");
        }
    };

    const handleAddSkillFromList = (skillName: string) => {
        if (!skills.includes(skillName)) {
            setSkills((prevSkills) => [...prevSkills, skillName]);
        }
    };

    const handleRemoveSkill = (skill: string) => {
        setSkills((prevSkills) => prevSkills.filter((s) => s !== skill));
    };

    const handleSave = () => {
        const skillsSection = portfolioData.sections.find(
            (section) => section.type === "Skills"
        );

        if (!skillsSection) {
            console.error("Skills section not found in portfolioData.");
            return;
        }

        const updatedSkillsSection = {
            ...skillsSection,
            customContent: {
                ...skillsSection.customContent,
                skills: skills,
            },
        };

        updatePortfolioData({
            sections: portfolioData.sections.map((section) =>
                section.type === "Skills" ? updatedSkillsSection : section
            ),
        });
        toast.success('Changes saved');
    };

    // Improved loading and empty states
    if (skillsLoading && allSkills.length === 0) {
        return (
            <div className="flex justify-center items-center h-32">
                <span>Loading skills...</span>
            </div>
        );
    }

    if (!skillsLoading && allSkills.length === 0) {
        return (
            <div className="flex flex-col items-center justify-center h-32 gap-4">
                <span>No skills found in the system.</span>
                <Button
                    onClick={() => dispatch(getAllSkills({ page: 1, limit: 100 }))}
                    className="px-4 py-2 bg-blue-500 text-white rounded-lg"
                >
                    Retry Loading Skills
                </Button>
            </div>
        );
    }

    return (
        <div className="pt-4 pb-4 relative z-10">
            {/* Debug information - can be removed in production */}
            <div className="mb-4 p-2 bg-gray-100 rounded text-xs">
                <p><strong>Debug Info:</strong></p>
                <p>Total Skills: {allSkills.length}</p>
                <p>Filtered Skills: {filteredSkills.length}</p>
                <p>Selected Category: {selectedCategory || "None"}</p>
            </div>

            <div className="grid grid-cols-3 items-start w-[95%] -ml-[20px] mt-5">
                {skills.map((skill, index) => (

                    <div key={index} className="flex gap-1 flex-col items-center mt-10">
                        <span className="border border-gray-600 flex items-center px-4 rounded-xl">
                            <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12.5 0C5.59644 0 0 5.59644 0 12.5C0 19.4036 5.59644 25 12.5 25C19.4036 25 25 19.4036 25 12.5C25 5.59644 19.4036 0 12.5 0Z" fill="#4CAF50" />
                            </svg>
                        </span>
                        <span className="text-xs">{skill}</span>
                        <button
                            type="button"
                            onClick={() => handleRemoveSkill(skill)}
                            className="text-xs text-red-500"
                        >
                            Remove
                        </button>
                    </div>
                ))}
            </div>

            <div className="mt-10">
                <div className="flex gap-2">
                    <input
                        type="text"
                        value={skillInput}
                        onChange={(e) => setSkillInput(e.target.value)}
                        className="border w-[50%] border-gray-900 rounded-lg outline-0 py-1 px-1"
                        placeholder="Add a skill"
                    />
                    <Button
                        type="button"
                        onClick={handleAddSkill}
                        className="px-2 py-2 lg:px-4 lg:py-1 bg-blue-500 text-xs lg:text-sm text-white rounded-lg"
                    >
                        Add
                    </Button>
                    <Button
                        type="button"
                        onClick={() => setShowSkillSelector(!showSkillSelector)}
                        className="px-2 py-2 lg:px-4 lg:py-1 bg-green-500 text-xs lg:text-sm text-white rounded-lg"
                    >
                        {showSkillSelector ? "Hide Selector" : "Select from List"}
                    </Button>
                </div>
            </div>

            {showSkillSelector && (
                <div className="mt-4 p-4 border border-gray-300 rounded-lg">
                    <div className="mb-4">
                        <input
                            type="text"
                            placeholder="Search skills..."
                            className="border border-gray-300 rounded-lg p-2 w-full"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                        />
                    </div>
                    <div className="mb-4">
                        <select
                            className="border border-gray-300 rounded-lg p-2 w-full"
                            value={selectedCategory}
                            onChange={(e) => setSelectedCategory(e.target.value)}
                        >
                            <option value="">All Categories</option>
                            {(categories || []).map((category: Category) => (
                                <option key={category._id} value={category.name}>
                                    {category.name}
                                </option>
                            ))}
                        </select>
                    </div>
                    <div className="max-h-60 overflow-y-auto">
                        {filteredSkills.length > 0 ? (
                            <div className="grid grid-cols-2 gap-2">
                                {filteredSkills.map((skill: Skill) => (
                                    <div
                                        key={skill._id}
                                        className={`p-2 rounded-lg cursor-pointer ${
                                            skills.includes(skill.name)
                                                ? 'bg-gray-200'
                                                : 'bg-gray-100 hover:bg-gray-200'
                                        }`}
                                        onClick={() => handleAddSkillFromList(skill.name)}
                                    >
                                        <div className="flex items-center justify-between">
                                            <span>{skill.name}</span>
                                            {skills.includes(skill.name) && (
                                                <span className="text-green-500">✓</span>
                                            )}
                                        </div>
                                        {skill.category && (
                                            <div className="text-xs text-gray-500">
                                                {skill.category.name}
                                            </div>
                                        )}
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <p className="text-gray-500">
                                {searchTerm 
                                    ? "No skills match your search. Try different terms." 
                                    : "No skills found in this category."}
                            </p>
                        )}
                    </div>
                </div>
            )}

            <div className="mt-6">
                <Button
                    onClick={handleSave}
                    className="lg:flex text-xs lg:text-sm items-center gap-2 custom-bg shadow-lg text-white px-2 py-2 lg:px-6 lg:py-3 rounded-xl"
                >
                    Save Changes
                </Button>
            </div>
        </div>
    );
};

export default Skills;



  const handleAddSkill = () => {
        if (skillInput.trim() && !skills.includes(skillInput.trim())) {
            setSkills((prevSkills) => [...prevSkills, skillInput.trim()]);
            setSkillInput("");
        }
    };

    const handleSelectSkill = (skillName: string) => {
        if (!skills.includes(skillName)) {
            setSkills((prevSkills) => [...prevSkills, skillName]);
            setShowSkillList(false);
        }
    };

    const handleRemoveSkill = (skill: string) => {
        setSkills((prevSkills) => prevSkills.filter((s) => s !== skill));
    };

    const handleSave = () => {
        const skillsSection = portfolioData.sections.find(
            (section) => section.type === "Skills"
        );

        if (!skillsSection) {
            console.error("Skills section not found in portfolioData.");
            return;
        }

        const updatedSkillsSection = {
            ...skillsSection,
            customContent: {
                ...skillsSection.customContent,
                skills: skills,
            },
        };

        updatePortfolioData({
            sections: portfolioData.sections.map((section) =>
                section.type === "Skills" ? updatedSkillsSection : section
            ),
        });
        toast.success('Changes saved');
    };



    UPDATEE NEW SKILLS

    import { useState, useEffect } from "react";
import { Portfolio, Skill } from "../dataTypes";
import Button from "./Button";
import { toast } from "react-toastify";
import { useAppDispatch, useAppSelector } from "../hooks";
import { getAllSkills, getAllCategories } from "../slices/portfolio/portfolioSlice";

type SkillsProps = {
    portfolioData: Portfolio;
    updatePortfolioData: (updatedData: Partial<Portfolio>) => void;
};

const Skills = ({ portfolioData, updatePortfolioData }: SkillsProps) => {
    const dispatch = useAppDispatch();
    const { allSkills, categories, isLoading, isError, error } = useAppSelector((state) => state.portfolio);
    const [skillInput, setSkillInput] = useState("");
    const [skills, setSkills] = useState<string[]>([]); // Local state for skills
    const [selectedCategory, setSelectedCategory] = useState<string>("");
    const [filteredSkills, setFilteredSkills] = useState<Skill[]>([]);
    const [showSkillList, setShowSkillList] = useState(false);

    // Initialize skills from portfolioData
    useEffect(() => {
        console.log("Portfolio Data Received:", JSON.stringify(portfolioData, null, 2));
        if (portfolioData?.sections?.length > 0) {
            const skillsSection = portfolioData.sections.find((section) => section.type === "Skills");
            console.log("Skills Section:", JSON.stringify(skillsSection, null, 2));
            const newSkills = skillsSection?.customContent?.skills || [];
            console.log("Setting skills to:", newSkills);
            setSkills(newSkills); // Set skills directly
        } else {
            console.log("No sections in portfolioData, setting skills to empty array");
            setSkills([]);
        }
    }, [portfolioData]);

    // Fetch skills and categories on mount
    useEffect(() => {
        console.log("Fetching skills and categories...");
        dispatch(getAllSkills({ page: 1, limit: 300 }));
        dispatch(getAllCategories());
    }, [dispatch]);

    // Filter skills based on selected category
    useEffect(() => {
        console.log("Filtering skills. Selected Category:", selectedCategory, "All Skills:", allSkills);
        if (selectedCategory) {
            const filtered = allSkills.filter(skill => 
                skill.category?.name.toLowerCase() === selectedCategory.toLowerCase()
            );
            setFilteredSkills(filtered);
        } else {
            setFilteredSkills(allSkills);
        }
    }, [selectedCategory, allSkills]);

    const handleAddSkill = () => {
        if (skillInput.trim() && !skills.includes(skillInput.trim())) {
            console.log("Adding skill:", skillInput.trim());
            setSkills((prevSkills) => [...prevSkills, skillInput.trim()]);
            setSkillInput("");
            setShowSkillList(false);
        }
    };

    const handleSelectSkill = (skillName: string) => {
        if (!skills.includes(skillName)) {
            console.log("Selecting skill:", skillName);
            setSkills((prevSkills) => [...prevSkills, skillName]);
            setSkillInput("");
            setShowSkillList(false);
        }
    };

    const handleRemoveSkill = (skill: string) => {
        console.log("Removing skill:", skill);
        setSkills((prevSkills) => prevSkills.filter((s) => s !== skill));
    };

    const handleSave = () => {
        const skillsSection = portfolioData.sections.find((section) => section.type === "Skills");
        if (!skillsSection) {
            console.error("Skills section not found in portfolioData.");
            return;
        }
        const updatedSkillsSection = {
            ...skillsSection,
            customContent: {
                ...skillsSection.customContent,
                skills: skills,
            },
        };
        console.log("Saving skills:", skills);
        updatePortfolioData({
            sections: portfolioData.sections.map((section) =>
                section.type === "Skills" ? updatedSkillsSection : section
            ),
        });
        toast.success('Changes saved');
    };

    console.log("Rendering Skills component. Skills:", skills, "IsLoading:", isLoading, "IsError:", isError);

    return (
        <div className="pt-4 pb-4 relative z-10" style={{ minHeight: "200px", border: "1px solid red" }}>
            {/* Error message */}
            {isError && (
                <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4">
                    <p>{error || "An error occurred while loading skills/categories."}</p>
                </div>
            )}

            {/* Display existing skills */}
            <div className="grid grid-cols-3 items-start w-[95%] mt-5">
                {isLoading ? (
                    <div className="col-span-3 text-center py-4">Loading skills...</div>
                ) : skills.length > 0 ? (
                    skills.map((skill, index) => (
                        <div key={index} className="flex gap-1 flex-col items-center mt-10">
                            <span className="border border-gray-600 flex items-center px-4 rounded-xl">
                                <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M12.5 0C5.59644 0 0 5.59644 0 12.5C0 19.4036 5.59644 25 12.5 25C19.4036 25 25 19.4036 25 12.5C25 5.59644 19.4036 0 12.5 0Z" fill="#4CAF50" />
                                </svg>
                            </span>
                            <span className="text-xs">{skill}</span>
                            <button
                                type="button"
                                onClick={() => handleRemoveSkill(skill)}
                                className="text-xs text-red-500"
                            >
                                Remove
                            </button>
                        </div>
                    ))
                ) : (
                    <div className="col-span-3 text-center py-4 text-gray-500">
                        No skills added yet
                    </div>
                )}
            </div>

            {/* Skill management UI */}
            {!isLoading && (
                <div className="mt-10 space-y-4">
                    <div className="relative">
                        <select
                            value={selectedCategory}
                            onChange={(e) => setSelectedCategory(e.target.value)}
                            className="border w-full border-gray-900 rounded-lg outline-0 py-1 px-1 appearance-none"
                        >
                            <option value="">All Categories</option>
                            {categories?.map((category) => (
                                <option key={category._id} value={category.name}>
                                    {category.name}
                                </option>
                            ))}
                        </select>
                        <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                            <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                            </svg>
                        </div>
                    </div>

                    <div className="relative">
                        <input
                            type="text"
                            value={skillInput}
                            onChange={(e) => {
                                setSkillInput(e.target.value);
                                setShowSkillList(true);
                            }}
                            onFocus={() => setShowSkillList(true)}
                            onBlur={() => setTimeout(() => setShowSkillList(false), 200)}
                            className="border w-full border-gray-900 rounded-lg outline-0 py-1 px-1"
                            placeholder="Search or select a skill"
                        />
                        {showSkillList && (
                            <div className="absolute z-10 mt-1 w-full bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                                {filteredSkills.length > 0 ? (
                                    filteredSkills
                                        .filter(skill => 
                                            skill.name.toLowerCase().includes(skillInput.toLowerCase())
                                        )
                                        .map((skill) => (
                                            <div
                                                key={skill._id}
                                                className="px-4 py-2 hover:bg-gray-100 cursor-pointer flex justify-between"
                                                onClick={() => handleSelectSkill(skill.name)}
                                            >
                                                <span>{skill.name}</span>
                                                {skill.category?.name && (
                                                    <span className="text-gray-500 text-sm">{skill.category.name}</span>
                                                )}
                                            </div>
                                        ))
                                ) : (
                                    <div className="px-4 py-2 text-gray-500">
                                        {allSkills.length === 0 ? "No skills available yet" : "No matching skills found"}
                                    </div>
                                )}
                            </div>
                        )}
                    </div>

                    <div className="flex gap-2">
                        <input
                            type="text"
                            value={skillInput}
                            onChange={(e) => setSkillInput(e.target.value)}
                            className="border w-[50%] border-gray-900 rounded-lg outline-0 py-1 px-1"
                            placeholder="Or manually add a skill"
                        />
                        <Button
                            type="button"
                            onClick={handleAddSkill}
                            className="px-2 py-2 lg:px-4 lg:py-1 bg-blue-500 text-xs lg:text-sm text-white rounded-lg"
                        >
                            Add
                        </Button>
                    </div>
                </div>
            )}

            {!isLoading && (
                <div className="mt-6">
                    <Button 
                        onClick={handleSave} 
                        className="lg:flex text-xs lg:text-sm items-center gap-2 custom-bg shadow-lg text-white px-2 py-2 lg:px-6 lg:py-3 rounded-xl"
                    >
                        Save Changes
                    </Button>
                </div>
            )}

            {/* Debug info */}
            <div className="mt-4 text-xs text-gray-500">
                <p>Debug info:</p>
                <p>Local skills: {skills.length} ({JSON.stringify(skills)})</p>
                <p>Backend skills: {allSkills.length} ({JSON.stringify(allSkills)})</p>
                <p>Categories: {categories?.length || 0} ({JSON.stringify(categories?.map(c => c.name))})</p>
                <p>Loading: {isLoading ? "Yes" : "No"}</p>
                <p>Error: {isError ? error : "None"}</p>
            </div>
        </div>
    );
};

export default Skills;






SECOND UPDATED SKILLS

import { useState, useEffect } from "react";
import { Portfolio, Skill } from "../dataTypes";
import Button from "./Button";
import { toast } from "react-toastify";
import { useAppDispatch, useAppSelector } from "../hooks";
import { getAllSkills, getAllCategories } from "../slices/portfolio/portfolioSlice";

type SkillsProps = {
    portfolioData: Portfolio;
    updatePortfolioData: (updatedData: Partial<Portfolio>) => void;
};

const Skills = ({ portfolioData, updatePortfolioData }: SkillsProps) => {
    const dispatch = useAppDispatch();
    const { allSkills, categories, isLoading, isError, error } = useAppSelector((state) => state.portfolio);
    const [skillInput, setSkillInput] = useState("");
    const [skills, setSkills] = useState<string[]>([]); // Local state for portfolio skills
    const [selectedCategory, setSelectedCategory] = useState<string>(""); // Category filter
    const [filteredSkills, setFilteredSkills] = useState<Skill[]>([]); // Backend skills for search
    const [showSkillList, setShowSkillList] = useState(false); // Toggle dropdown

    // Initialize skills from portfolioData
    useEffect(() => {
        console.log("Portfolio Data:", portfolioData);
        if (portfolioData?.sections?.length > 0) {
            const skillsSection = portfolioData.sections.find((section) => section.type === "Skills");
            console.log("Skills Section:", skillsSection);
            if (skillsSection) {
                console.log("Setting initial skills:", skillsSection.customContent?.skills || []);
                setSkills(skillsSection.customContent?.skills || []);
            }
        }
    }, [portfolioData]);

    // Fetch all skills and categories on mount
    useEffect(() => {
        console.log("Fetching skills and categories...");
        dispatch(getAllSkills({ page: 1, limit: 300 }));
        dispatch(getAllCategories());
    }, [dispatch]);

    // Filter backend skills based on selected category
    useEffect(() => {
        console.log("Filtering skills. Category:", selectedCategory, "All Skills:", allSkills);
        if (selectedCategory) {
            const filtered = allSkills.filter(skill => 
                skill.category?.name.toLowerCase() === selectedCategory.toLowerCase()
            );
            setFilteredSkills(filtered);
        } else {
            setFilteredSkills(allSkills);
        }
    }, [selectedCategory, allSkills]);

    // Handle adding a new skill manually
    const handleAddSkill = () => {
        if (skillInput.trim() && !skills.includes(skillInput.trim())) {
            console.log("Adding manual skill:", skillInput.trim());
            setSkills((prevSkills) => [...prevSkills, skillInput.trim()]);
            setSkillInput("");
            setShowSkillList(false);
        }
    };

    // Handle selecting a skill from the backend list
    const handleSelectSkill = (skillName: string) => {
        if (!skills.includes(skillName)) {
            console.log("Selecting skill from list:", skillName);
            setSkills((prevSkills) => [...prevSkills, skillName]);
            setSkillInput("");
            setShowSkillList(false);
        }
    };

    // Handle removing a skill
    const handleRemoveSkill = (skill: string) => {
        console.log("Removing skill:", skill);
        setSkills((prevSkills) => prevSkills.filter((s) => s !== skill));
    };

    // Handle saving changes
    const handleSave = () => {
        const skillsSection = portfolioData.sections.find((section) => section.type === "Skills");
        if (!skillsSection) {
            console.error("Skills section not found in portfolioData.");
            return;
        }
        const updatedSkillsSection = {
            ...skillsSection,
            customContent: {
                ...skillsSection.customContent,
                skills: skills,
            },
        };
        console.log("Saving skills:", skills);
        updatePortfolioData({
            sections: portfolioData.sections.map((section) =>
                section.type === "Skills" ? updatedSkillsSection : section
            ),
        });
        toast.success('Changes saved');
    };

    return (
        <div className="pt-4 pb-4 relative z-10">
            {/* Display existing skills */}
            <div className="grid grid-cols-3 items-start w-[95%] -ml-[20px] mt-5">
                {skills.length > 0 ? (
                    skills.map((skill, index) => (
                        <div key={index} className="flex gap-1 flex-col items-center mt-10">
                            <span className="border border-gray-600 flex items-center px-4 rounded-xl">
                                <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M12.5 0C5.59644 0 0 5.59644 0 12.5C0 19.4036 5.59644 25 12.5 25C19.4036 25 25 19.4036 25 12.5C25 5.59644 19.4036 0 12.5 0Z" fill="#4CAF50" />
                                </svg>
                            </span>
                            <span className="text-xs">{skill}</span>
                            <button
                                type="button"
                                onClick={() => handleRemoveSkill(skill)}
                                className="text-xs text-red-500"
                            >
                                Remove
                            </button>
                        </div>
                    ))
                ) : (
                    <div className="col-span-3 text-center py-4 text-gray-500">
                        No skills added yet
                    </div>
                )}
            </div>

            {/* Skill management UI */}
            <div className="mt-10 space-y-4">
                {/* Category dropdown */}
                <div className="relative">
                    <select
                        value={selectedCategory}
                        onChange={(e) => setSelectedCategory(e.target.value)}
                        className="border w-full border-gray-900 rounded-lg outline-0 py-1 px-1 appearance-none"
                    >
                        <option value="">All Categories</option>
                        {categories?.map((category) => (
                            <option key={category._id} value={category.name}>
                                {category.name}
                            </option>
                        ))}
                    </select>
                    <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                        <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                            <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                        </svg>
                    </div>
                </div>

                {/* Skill search and selection */}
                <div className="relative">
                    <input
                        type="text"
                        value={skillInput}
                        onChange={(e) => {
                            setSkillInput(e.target.value);
                            setShowSkillList(true);
                        }}
                        onFocus={() => setShowSkillList(true)}
                        onBlur={() => setTimeout(() => setShowSkillList(false), 200)}
                        className="border w-full border-gray-900 rounded-lg outline-0 py-1 px-1"
                        placeholder="Search or select a skill"
                    />
                    {showSkillList && (
                        <div className="absolute z-10 mt-1 w-full bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                            {filteredSkills.length > 0 ? (
                                filteredSkills
                                    .filter(skill => 
                                        skill.name.toLowerCase().includes(skillInput.toLowerCase())
                                    )
                                    .map((skill) => (
                                        <div
                                            key={skill._id}
                                            className="px-4 py-2 hover:bg-gray-100 cursor-pointer flex justify-between"
                                            onClick={() => handleSelectSkill(skill.name)}
                                        >
                                            <span>{skill.name}</span>
                                            {skill.category?.name && (
                                                <span className="text-gray-500 text-sm">{skill.category.name}</span>
                                            )}
                                        </div>
                                    ))
                            ) : (
                                <div className="px-4 py-2 text-gray-500">
                                    {allSkills.length === 0 && !isLoading ? "No skills available yet" : "No matching skills found"}
                                </div>
                            )}
                        </div>
                    )}
                </div>

                {/* Manual skill addition */}
                <div className="flex gap-2">
                    <input
                        type="text"
                        value={skillInput}
                        onChange={(e) => setSkillInput(e.target.value)}
                        className="border w-[50%] border-gray-900 rounded-lg outline-0 py-1 px-1"
                        placeholder="Or manually add a skill"
                    />
                    <Button
                        type="button"
                        onClick={handleAddSkill}
                        className="px-2 py-2 lg:px-4 lg:py-1 bg-blue-500 text-xs lg:text-sm text-white rounded-lg"
                    >
                        Add
                    </Button>
                </div>
            </div>

            {/* Save Changes Button */}
            <div className="mt-6">
                <Button 
                    onClick={handleSave} 
                    className="lg:flex text-xs lg:text-sm items-center gap-2 custom-bg shadow-lg text-white px-2 py-2 lg:px-6 lg:py-3 rounded-xl"
                >
                    Save Changes
                </Button>
            </div>

            {/* Optional debug info */}
            {process.env.NODE_ENV === "development" && (
                <div className="mt-4 text-xs text-gray-500">
                    <p>Debug info:</p>
                    <p>Local skills: {skills.length} ({JSON.stringify(skills)})</p>
                    <p>Backend skills: {allSkills.length} ({JSON.stringify(allSkills)})</p>
                    <p>Categories: {categories?.length || 0} ({JSON.stringify(categories?.map(c => c.name))})</p>
                    <p>Loading: {isLoading ? "Yes" : "No"}</p>
                    <p>Error: {isError ? error : "None"}</p>
                </div>
            )}
        </div>
    );
};

export default Skills;









hhjfh


import { useState, useEffect } from "react";
import { Portfolio } from "../dataTypes";
import Button from "./Button";
import { toast } from "react-toastify";
import { useAppDispatch, useAppSelector } from "../hooks";
import { getAllSkills, getAllCategories } from "../slices/portfolio/portfolioSlice";

type SkillsProps = {
    portfolioData: Portfolio;
    updatePortfolioData: (updatedData: Partial<Portfolio>) => void;
};

const Skills = ({ portfolioData, updatePortfolioData }: SkillsProps) => {
    const dispatch = useAppDispatch();
    const { allSkills, categories, isLoading: isSkillsLoading } = useAppSelector((state) => state.portfolio);
    
    const [skillInput, setSkillInput] = useState("");
    const [skills, setSkills] = useState<string[]>([]);
    const [selectedCategory, setSelectedCategory] = useState<string>("");
    const [filteredSkills, setFilteredSkills] = useState<any[]>([]);
    const [isInitialLoad, setIsInitialLoad] = useState(true);

    // Initialize skills from portfolioData
    useEffect(() => {
        if (portfolioData?.sections?.length > 0) {
            const skillsSection = portfolioData.sections.find((section) => section.type === "Skills");
            if (skillsSection) {
                setSkills(skillsSection.customContent?.skills || []);
            }
        }
    }, [portfolioData]);

    // Load skills and categories
    useEffect(() => {
        const loadData = async () => {
            try {
                await dispatch(getAllSkills({ page: 1, limit: 300 }));
                await dispatch(getAllCategories());
            } catch (error) {
                console.error("Failed to load data:", error);
            } finally {
                setIsInitialLoad(false);
            }
        };
        
        // Only load if we don't have data yet
        if (allSkills.length === 0 || categories.length === 0) {
            loadData();
        } else {
            setIsInitialLoad(false);
        }
    }, [dispatch, allSkills.length, categories.length]);

    // Filter skills based on selected category
    useEffect(() => {
        if (selectedCategory) {
            const filtered = allSkills.filter(skill => 
                skill.category?.name === selectedCategory
            );
            setFilteredSkills(filtered);
        } else {
            setFilteredSkills(allSkills);
        }
    }, [selectedCategory, allSkills]);

    const handleAddSkill = (skillName: string) => {
        if (skillName.trim() && !skills.includes(skillName.trim())) {
            setSkills((prevSkills) => [...prevSkills, skillName.trim()]);
        }
    };

    const handleRemoveSkill = (skill: string) => {
        setSkills((prevSkills) => prevSkills.filter((s) => s !== skill));
    };

    const handleSave = () => {
        const skillsSection = portfolioData?.sections?.find(
            (section) => section.type === "Skills"
        );

        if (!skillsSection) {
            console.error("Skills section not found");
            return;
        }

        const updatedSkillsSection = {
            ...skillsSection,
            customContent: {
                ...skillsSection.customContent,
                skills: skills,
            },
        };

        updatePortfolioData({
            sections: portfolioData.sections.map((section) =>
                section.type === "Skills" ? updatedSkillsSection : section
            ),
        });
        toast.success('Skills updated successfully');
    };

    if (!portfolioData) {
        return null;
    }

    // Show loading state until initial data is loaded
    if (isInitialLoad || isSkillsLoading) {
        return (
            <div className="flex justify-center items-center h-64">
                <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
                <span className="ml-3">Loading skills...</span>
            </div>
        );
    }

    return (
        <div className="pt-4 pb-4 relative z-10 w-[100%]">
            {/* Existing skills display */}
            <div className="grid w-[100%] grid-cols-4 overflow-y-scroll scrollbar-thin lg:scrollbar-thumb-gray-300 lg:scrollbar-track-gray-600 overflow-x-hidden h-[20vh] items-start mt-5">
                {skills.length > 0 ? (
                    skills.map((skill, index) => (
                        <div key={index} className="flex gap-1 flex-col justify-center text-center items-center mt-10">
                            <span className="flex items-center px-4 rounded-xl">
                                <svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <circle cx="32" cy="32" r="30" fill="#f0f0f0" />
                                    <path d="M24 16H40C44.4183 16 48 19.5817 48 24V40C48 44.4183 44.4183 48 40 48H24C19.5817 48 16 44.4183 16 40V24C16 19.5817 19.5817 16 24 16Z" fill="#808080" />
                                    <path d="M24 16H32V12H24C19.5817 12 16 15.5817 16 20V28H20V24C20 21.7909 21.7909 20 24 20Z" fill="#606060" />
                                    <path d="M40 16H32V12H40C44.4183 12 48 15.5817 48 20V28H44V24C44 21.7909 42.2091 20 40 20Z" fill="#606060" />
                                    <path d="M16 40V32H12V40C12 44.4183 15.5817 48 20 48H28V44H24C21.7909 44 20 42.2091 20 40V36H16Z" fill="#606060" />
                                    <path d="M48 40V32H52V40C52 44.4183 48.4183 48 44 48H36V44H40C42.2091 44 44 42.2091 44 40V36H48Z" fill="#606060" />
                                    <text x="32" y="38" fontFamily="Arial" fontSize="12" textAnchor="middle" fill="white">SKILL</text>
                                </svg>
                            </span>
                            <span className="text-xs">{skill}</span>
                            <button
                                type="button"
                                onClick={() => handleRemoveSkill(skill)}
                                className="text-xs text-red-500"
                            >
                                Remove
                            </button>
                        </div>
                    ))
                ) : (
                    <div className="col-span-4 flex justify-center items-center h-full">
                        <p>No skills added yet</p>
                    </div>
                )}
            </div>

            {/* Skills selection UI */}
            <div className="mt-4">
                <select
                    value={selectedCategory}
                    onChange={(e) => setSelectedCategory(e.target.value)}
                    className="border border-gray-900 outline-0 rounded-md px-3 py-2 w-full"
                >
                    <option value="">All Categories</option>
                    {categories.map((category) => (
                        <option key={category._id} value={category.name}>
                            {category.name}
                        </option>
                    ))}
                </select>
            </div>

            <div className="mt-4 px-2 max-h-40 overflow-y-scroll scrollbar-thin lg:scrollbar-thumb-gray-300 lg:scrollbar-track-gray-600">
                <div className="grid grid-cols-2 gap-2">
                    {filteredSkills.length > 0 ? (
                        filteredSkills.map((skill) => (
                            <button
                                key={skill._id}
                                type="button"
                                onClick={() => handleAddSkill(skill.name)}
                                disabled={skills.includes(skill.name)}
                                className={`p-4 rounded-md text-sm flex flex-col items-center justify-center flex-wrap ${
                                    skills.includes(skill.name)
                                        ? "bg-gray-200 cursor-not-allowed"
                                        : "bg-gray-500 hover:bg-gray-800 text-white"
                                }`}
                            >
                                {skill.name}
                                {skill.category && (
                                    <span className="text-xs text-white mt-2 block">{skill.category.name}</span>
                                )}
                            </button>
                        ))
                    ) : (
                        <div className="col-span-2 text-center py-4">
                            <p>No skills found in this category</p>
                        </div>
                    )}
                </div>
            </div>

            <div className="mt-6">
                <Button 
                    onClick={handleSave} 
                    className="lg:flex text-xs lg:text-sm items-center gap-2 custom-bg shadow-lg text-white px-2 py-2 lg:px-6 lg:py-3 rounded-xl"
                >
                    Save Changes
                </Button>
            </div>
        </div>
    );
};

export default Skills;